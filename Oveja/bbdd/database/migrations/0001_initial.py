# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AggregatedStatsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('averageAssists', models.IntegerField(verbose_name='Promedio de asistencias en dominion')),
                ('averageChampionsKilled', models.IntegerField(verbose_name='Promedio de kills en dominion')),
                ('averageCombatPlayerScore', models.IntegerField(verbose_name='Promedio de los puntos de batalla en dominion')),
                ('averageNodeCapture', models.IntegerField(verbose_name='Promedio de torres capturadas en dominion')),
                ('averageNodeCaptureAssist', models.IntegerField(verbose_name='Promedio de asistencias capturando torres en dominion')),
                ('averageNodeNeutralize', models.IntegerField(verbose_name='Promedio de torres neutralizadas en dominion')),
                ('averageNodeNeutralizeAssist', models.IntegerField(verbose_name='Promedio de asistencias neutralizando torres en dominion')),
                ('averageNumDeaths', models.IntegerField(verbose_name='Promedio de muertes en dominion')),
                ('averageObjectivePlayerScore', models.IntegerField(verbose_name='Promedio de puntos de objetivo del jugador en dominion')),
                ('averageTeamObjective', models.IntegerField(verbose_name='Promedio de puntos del equipo en dominion')),
                ('averageTotalPlayerScore', models.IntegerField(verbose_name='Promedio de puntos totales en dominion')),
                ('botGamesPlayed', models.IntegerField(verbose_name='Partidas jugadas en modo "vs IA"')),
                ('killingSpree', models.IntegerField(verbose_name='Cantidad de rachas de asesinatos')),
                ('maxAssists', models.IntegerField(verbose_name='Cantidad maxima de asistencias en dominion')),
                ('maxChampionsKilled', models.IntegerField(verbose_name='Cantidad maxima de campeones asesinados en una partida')),
                ('maxCombatPlayerScore', models.IntegerField(verbose_name='Cantidad maxima de puntos de combate en dominion')),
                ('maxLargestCriticalStrike', models.IntegerField(verbose_name='Mayor da\xf1o realizado con un critico')),
                ('maxLargestKillingSpree', models.IntegerField(verbose_name='Mayor racha de asesinatos')),
                ('maxNodeCapture', models.IntegerField(verbose_name='Cantidad maxima de torres capturados en dominion')),
                ('maxNodeCaptureAssist', models.IntegerField(verbose_name='Cantidad maxima de asistencias neutralizando torres en dominion')),
                ('maxNodeNeutralize', models.IntegerField(verbose_name='Cantidad maxima de torres neutralizados en dominion')),
                ('maxNodeNeutralizeAssist', models.IntegerField(verbose_name='Cantidad maxima de asistencias neutralizando torres en dominion')),
                ('maxNumDeaths', models.IntegerField(verbose_name='Cantidad maxima de muertes en dominion')),
                ('maxObjectivePlayerScore', models.IntegerField(verbose_name='Cantidad maxima ')),
                ('maxTeamObjective', models.IntegerField(verbose_name='Cantidad maxima de puntaje de objetivo del equipo en dominion')),
                ('maxTimePlayed', models.IntegerField(verbose_name='Partida mas larga jugada')),
                ('maxTimeSpentLiving', models.IntegerField(verbose_name='Maxima cantidad de tiempo sin morir')),
                ('maxTotalPlayerScore', models.IntegerField(verbose_name='Cantidad maxima de puntaje total del jugador en dominion')),
                ('mostChampionKillsPerSession', models.IntegerField(verbose_name='Cantidad maxima de asesinatos en una partida')),
                ('mostSpellsCast', models.IntegerField(verbose_name='Cantidad maxima de hechizos lanzados en una partida')),
                ('normalGamesPlayed', models.IntegerField(verbose_name='Cantidad de partidas normales jugadas')),
                ('rankedPremadeGamesPlayed', models.IntegerField(verbose_name='Cantidad de rankeds jugadas en premade')),
                ('rankedSoloGamesPlayed', models.IntegerField(verbose_name='Cantidad de rankeds jugadas en solitario')),
                ('totalAssists', models.IntegerField(verbose_name='Asistencias totales')),
                ('totalChampionKills', models.IntegerField(verbose_name='Total de campeones asesinados')),
                ('totalDamageDealt', models.IntegerField(verbose_name='Total de da\xf1o realizado')),
                ('totalDamageTaken', models.IntegerField(verbose_name='Total de da\xf1o recibido')),
                ('totalDeathsPerSession', models.IntegerField(verbose_name='Total de muertes en una partida (solo en rankeds)')),
                ('totalDoubleKills', models.IntegerField(verbose_name='Total de doublekills')),
                ('totalFirstBlood', models.IntegerField(verbose_name='Total de "Primeras Sangres" realizadas')),
                ('totalGoldEarned', models.IntegerField(verbose_name='Total de oro ganado')),
                ('totalHeal', models.IntegerField(verbose_name='Total de vida curada')),
                ('totalMagicDamageDealt', models.IntegerField(verbose_name='Total de da\xf1o magico realizado')),
                ('totalMinionKills', models.IntegerField(verbose_name='Total de minions asesinados')),
                ('totalNeutralMinionsKilled', models.IntegerField(verbose_name='Total de minions neutrales asesinados')),
                ('totalNodeCapture', models.IntegerField(verbose_name='Total de nodos capturados en dominion')),
                ('totalNodeNeutralize', models.IntegerField(verbose_name='Total de nodos neutralizados en dominion')),
                ('totalPentaKills', models.IntegerField(verbose_name='Total de pentakills realizadas')),
                ('totalPhysicalDamageDealt', models.IntegerField(verbose_name='Total de da\xf1o fisico realizado')),
                ('totalQuadraKills', models.IntegerField(verbose_name='Total de quadrakills realizadas')),
                ('totalSessionsLost', models.IntegerField(verbose_name='Total de partidas perdidas')),
                ('totalSessionsPlayed', models.IntegerField(verbose_name='Total de partidas jugadas')),
                ('totalSessionsWon', models.IntegerField(verbose_name='Total de partidas ganadas')),
                ('totalTripleKills', models.IntegerField(verbose_name='Total de triplekills')),
                ('totalTurretsKilled', models.IntegerField(verbose_name='Total de torres destruidas')),
                ('totalUnrealKills', models.IntegerField(verbose_name='Total de ejecuciones')),
            ],
        ),
        migrations.CreateModel(
            name='BannedChampion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('championId', models.IntegerField(verbose_name='Id del campeon banneado')),
                ('pickTurn', models.IntegerField(verbose_name='Turno en el que fue banneado')),
            ],
        ),
        migrations.CreateModel(
            name='BannedChampions',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('championId', models.BigIntegerField(verbose_name='Id del campeon baneado')),
                ('pickTurn', models.IntegerField(verbose_name='El turno en el que el campeon fue baneado')),
                ('teamId', models.BigIntegerField(verbose_name='Id del equipo que baneo el campeon')),
            ],
        ),
        migrations.CreateModel(
            name='BasicDataDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('colloq', models.TextField(verbose_name='')),
                ('consumeOnFull', models.BooleanField(verbose_name='')),
                ('consumed', models.BooleanField(verbose_name='')),
                ('depth', models.IntegerField(verbose_name='')),
                ('description', models.TextField(verbose_name='')),
                ('exFrom', models.TextField(verbose_name='')),
                ('gold', models.TextField(verbose_name='oro')),
                ('group', models.TextField(verbose_name='')),
                ('hideFromAll', models.BooleanField(verbose_name='')),
                ('exId', models.IntegerField(verbose_name='')),
                ('image', models.TextField(verbose_name='')),
                ('inStore', models.BooleanField(verbose_name='')),
                ('into', models.TextField(verbose_name='')),
                ('maps', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('plaintext', models.TextField(verbose_name='')),
                ('requiredChampion', models.TextField(verbose_name='')),
                ('rune', models.TextField(verbose_name='')),
                ('sanitizedDescription', models.TextField(verbose_name='')),
                ('specialRecipe', models.IntegerField(verbose_name='')),
                ('stacks', models.IntegerField(verbose_name='')),
                ('stats', models.TextField(verbose_name='')),
                ('tags', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='BasicDataStatsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('FlatArmorMod', models.FloatField(verbose_name='')),
                ('FlatAttackSpeedMod', models.FloatField(verbose_name='')),
                ('FlatBlockMod', models.FloatField(verbose_name='')),
                ('FlatCritChanceMod', models.FloatField(verbose_name='')),
                ('FlatCritDamageMod', models.FloatField(verbose_name='')),
                ('FlatEXPBonus', models.FloatField(verbose_name='')),
                ('FlatEnergyPoolMod', models.FloatField(verbose_name='')),
                ('FlatEnergyRegenMod', models.FloatField(verbose_name='')),
                ('FlatHPPoolMod', models.FloatField(verbose_name='')),
                ('FlatHPRegenMod', models.FloatField(verbose_name='')),
                ('FlatMPPoolMod', models.FloatField(verbose_name='')),
                ('FlatMPRegenMod', models.FloatField(verbose_name='')),
                ('FlatMagicDamageMod', models.FloatField(verbose_name='')),
                ('FlatMovementSpeedMod', models.FloatField(verbose_name='')),
                ('FlatPhysicalDamageMod', models.FloatField(verbose_name='')),
                ('FlatSpellBlockMod', models.FloatField(verbose_name='')),
                ('PercentArmorMod', models.FloatField(verbose_name='')),
                ('PercentAttackSpeedMod', models.FloatField(verbose_name='')),
                ('PercentBlockMod', models.FloatField(verbose_name='')),
                ('PercentCritChanceMod', models.FloatField(verbose_name='')),
                ('PercentCritDamageMod', models.FloatField(verbose_name='')),
                ('PercentDodgeMod', models.FloatField(verbose_name='')),
                ('PercentEXPBonus', models.FloatField(verbose_name='')),
                ('PercentHPPoolMod', models.FloatField(verbose_name='')),
                ('PercentHPRegenMod', models.FloatField(verbose_name='')),
                ('PercentLifeStealMod', models.FloatField(verbose_name='')),
                ('PercentMPPoolMod', models.FloatField(verbose_name='')),
                ('PercentMPRegenMod', models.FloatField(verbose_name='')),
                ('PercentMagicDamageMod', models.FloatField(verbose_name='')),
                ('PercentMovementSpeedMod', models.FloatField(verbose_name='')),
                ('PercentPhysicalDamageMod', models.FloatField(verbose_name='')),
                ('PercentSpellBlockMod', models.FloatField(verbose_name='')),
                ('PercentSpellVampMod', models.FloatField(verbose_name='')),
                ('rFlatArmorModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatArmorPenetrationMod', models.FloatField(verbose_name='')),
                ('rFlatArmorPenetrationModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatCritChanceModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatCritDamageModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatDodgeMod', models.FloatField(verbose_name='')),
                ('rFlatDodgeModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatEnergyModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatEnergyRegenModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatGoldPer10Mod', models.FloatField(verbose_name='')),
                ('rFlatHPModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatHPRegenModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatMPModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatMPRegenModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatMagicDamageModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatMagicPenetrationMod', models.FloatField(verbose_name='')),
                ('rFlatMagicPenetrationModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatMovementSpeedModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatPhysicalDamageModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatSpellBlockModPerLevel', models.FloatField(verbose_name='')),
                ('rFlatTimeDeadMod', models.FloatField(verbose_name='')),
                ('rFlatTimeDeadModPerLevel', models.FloatField(verbose_name='')),
                ('rPercentArmorPenetrationMod', models.FloatField(verbose_name='')),
                ('rPercentArmorPenetrationModPerLevel', models.FloatField(verbose_name='')),
                ('rPercentAttackSpeedModPerLevel', models.FloatField(verbose_name='')),
                ('rPercentCooldownMod', models.FloatField(verbose_name='')),
                ('rPercentCooldownModPerLevel', models.FloatField(verbose_name='')),
                ('rPercentMagicPenetrationMod', models.FloatField(verbose_name='')),
                ('rPercentMagicPenetrationModPerLevel', models.FloatField(verbose_name='')),
                ('rPercentMovementSpeedModPerLevel', models.FloatField(verbose_name='')),
                ('rPercentTimeDeadMod', models.FloatField(verbose_name='')),
                ('rPercentTimeDeadModPerLevel', models.FloatField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='BlockDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('items', models.TextField(verbose_name='')),
                ('recMath', models.BooleanField(verbose_name='Item con "Unica Pasiva"')),
                ('exType', models.TextField(verbose_name='T,max_length=300ipo de los items')),
            ],
        ),
        migrations.CreateModel(
            name='BlockItemDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('count', models.IntegerField(verbose_name='Cantidad de el item a comprar')),
                ('exId', models.IntegerField(verbose_name='ID del item')),
            ],
        ),
        migrations.CreateModel(
            name='ChampionListDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('champions', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ChampionsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(verbose_name='')),
                ('botEnabled', models.BooleanField(verbose_name='')),
                ('botMmEnabled', models.BooleanField(verbose_name='')),
                ('freeToPlay', models.BooleanField(verbose_name='')),
                ('exId', models.BigIntegerField(verbose_name='')),
                ('rankedPlayEnabled', models.BooleanField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ChampionsSpellDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('altimages', models.TextField(verbose_name='')),
                ('cooldown', models.TextField(verbose_name='')),
                ('cooldownBurn', models.TextField(verbose_name='C,max_length=300ooldown a travez de los niveles de la habilidad')),
                ('cost', models.TextField(verbose_name='')),
                ('costBurn', models.TextField(verbose_name='C,max_length=300oste de Energia/Mana/Furia/Heat (no incluye coste de vida)')),
                ('costType', models.TextField(verbose_name='T,max_length=300ipo de Coste pofcurrentHealth(vida)/Energia/Mana/Furia/Heat(calor)')),
                ('description', models.TextField(verbose_name='D,max_length=300escripcion de la habilidad')),
                ('effect', models.TextField(verbose_name='')),
                ('effectBurn', models.TextField(verbose_name='')),
                ('image', models.TextField(verbose_name='')),
                ('key', models.TextField(verbose_name='K,max_length=300ey de la habilidad')),
                ('leveltip', models.TextField(verbose_name='')),
                ('maxrank', models.IntegerField(verbose_name='Nivel maximo de la habilidad')),
                ('name', models.TextField(verbose_name='N,max_length=300ombre de la habilidad')),
                ('exRange', models.TextField(verbose_name='')),
                ('rangeBurn', models.TextField(verbose_name='R,max_length=300ango a travez de los niveles de la habilidad')),
                ('resource', models.TextField(verbose_name='M,max_length=300uestra el coste de la habilidad, obteniendolo desde la variable "cost"')),
                ('sanitizedTooltip', models.TextField(verbose_name='F,max_length=300uncion concreta de la habilidad')),
                ('sanitizedDescription', models.TextField(verbose_name='D,max_length=300escripcion concreta de lo que hace la habilidad')),
                ('tooltip', models.TextField(verbose_name='F,max_length=300uncion de la habilidad')),
                ('exVars', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ChampionStatsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('exId', models.IntegerField(verbose_name='')),
                ('stats', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='CurrentGameInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bannedChampions', models.TextField(verbose_name='')),
                ('gameId', models.BigIntegerField(verbose_name='Id del Partido')),
                ('gameLength', models.BigIntegerField(verbose_name='Cuantos Segundos lleva durando')),
                ('gameMode', models.TextField(verbose_name='M,max_length=300odo(CLASSIC, ODIN, ARAM, TUTORIAL, ONEFORALL, ASCENSION, FIRSTBLOOD, KINGPORO)')),
                ('gameQueueConfigId', models.BigIntegerField(verbose_name='Tipo de partida(RANKED_SOLO_5x5, RANKED_TEAM_3x3, RANKED_TEAM_5x5)')),
                ('gameStartTime', models.BigIntegerField(verbose_name='Hora de inicio en milisegundos')),
                ('gameType', models.TextField(verbose_name='T,max_length=300ipo de Juego(CUSTOM_GAME, MATCHED_GAME, TUTORIAL_GAME)')),
                ('mapId', models.BigIntegerField(verbose_name='Id del mapa')),
                ('observers', models.TextField(verbose_name='')),
                ('participants', models.TextField(verbose_name='')),
                ('platformId', models.TextField(verbose_name='I,max_length=300d de la plataforma en la que esta siendo jugado')),
            ],
        ),
        migrations.CreateModel(
            name='CurrentGameParticipant',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bot', models.BooleanField(verbose_name='Es un bot')),
                ('championId', models.BigIntegerField(verbose_name='Id del jugador')),
                ('masteries', models.TextField(verbose_name='')),
                ('profileIconId', models.BigIntegerField(verbose_name='Id del icono de invocador que esta usando')),
                ('runes', models.TextField(verbose_name='')),
                ('spell1Id', models.BigIntegerField(verbose_name='Id del Summoner Spell 1')),
                ('spell2Id', models.BigIntegerField(verbose_name='Id del Summoner Spell 2')),
                ('summonerId', models.BigIntegerField(verbose_name='Id del jugador')),
                ('summonerName', models.TextField(verbose_name='N,max_length=300ombre publico del jugador')),
                ('teamId', models.BigIntegerField(verbose_name='Id del equipo en el participa')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ascendedType', models.TextField(verbose_name='')),
                ('assistingParticipantIds', models.TextField(verbose_name='')),
                ('buildingType', models.TextField(verbose_name='')),
                ('creatorId', models.IntegerField(verbose_name='')),
                ('eventType', models.TextField(verbose_name='')),
                ('itemAfter', models.IntegerField(verbose_name='')),
                ('itemBefore', models.IntegerField(verbose_name='')),
                ('itemId', models.IntegerField(verbose_name='')),
                ('killerId', models.IntegerField(verbose_name='')),
                ('laneType', models.TextField(verbose_name='')),
                ('levelUpType', models.TextField(verbose_name='')),
                ('monsterType', models.TextField(verbose_name='')),
                ('participantId', models.IntegerField(verbose_name='')),
                ('pointCaptured', models.TextField(verbose_name='')),
                ('position', models.TextField(verbose_name='')),
                ('skillSlot', models.IntegerField(verbose_name='')),
                ('teamId', models.IntegerField(verbose_name='')),
                ('timestamp', models.BigIntegerField(verbose_name='')),
                ('towerType', models.TextField(verbose_name='')),
                ('victimId', models.IntegerField(verbose_name='')),
                ('wardType', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='FeaturedGames',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('clientRefreshInterval', models.BigIntegerField(verbose_name='Tiempo de espera antes de actualizar los juegos importantes')),
                ('gameList', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='FeaturedGamesInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bannedChampions', models.TextField(verbose_name='')),
                ('gameId', models.BigIntegerField(verbose_name='Id del Partido')),
                ('gameLength', models.BigIntegerField(verbose_name='Cuantos Segundos lleva durando')),
                ('gameMode', models.TextField(verbose_name='M,max_length=300odo(CLASSIC, ODIN, ARAM, TUTORIAL, ONEFORALL, ASCENSION, FIRSTBLOOD, KINGPORO)')),
                ('gameQueueConfigId', models.BigIntegerField(verbose_name='Tipo de partida(RANKED_SOLO_5x5, RANKED_TEAM_3x3, RANKED_TEAM_5x5)')),
                ('gameStartTime', models.BigIntegerField(verbose_name='Hora de inicio en milisegundos')),
                ('gameType', models.TextField(verbose_name='T,max_length=300ipo de Juego(CUSTOM_GAME, MATCHED_GAME, TUTORIAL_GAME)')),
                ('mapId', models.BigIntegerField(verbose_name='Id del mapa')),
                ('observers', models.TextField(verbose_name='')),
                ('participants', models.TextField(verbose_name='')),
                ('platformId', models.TextField(verbose_name='I,max_length=300d de la plataforma en la que esta siendo jugado')),
            ],
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('events', models.TextField(verbose_name='')),
                ('participantFrames', models.TextField(verbose_name='')),
                ('timestamp', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='GameDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('championId', models.IntegerField(verbose_name='Id del Pj usado')),
                ('createDate', models.BigIntegerField(verbose_name='Fecha en la que se grabo los datos del final del partido')),
                ('fellowPlayers', models.TextField(verbose_name='')),
                ('gameId', models.BigIntegerField(verbose_name='Id de la partida')),
                ('gameMode', models.TextField(verbose_name='M,max_length=300odo(CLASSIC, ODIN, ARAM, TUTORIAL, ONEFORALL, ASCENSION, FIRSTBLOOD, KINGPORO)')),
                ('gameType', models.TextField(verbose_name='T,max_length=300ipo de Juego(CUSTOM_GAME, MATCHED_GAME, TUTORIAL_GAME)')),
                ('invalid', models.BooleanField(verbose_name='Invalid flag(Supongo que es derrota evitada)')),
                ('ipEarned', models.IntegerField(verbose_name='IP ganado')),
                ('level', models.IntegerField(verbose_name='Nivel en el que termino')),
                ('mapId', models.IntegerField(verbose_name='Id del mapa')),
                ('spell1', models.IntegerField(verbose_name='Id del Summoner Spell 1')),
                ('spell2', models.IntegerField(verbose_name='Id del Summoner Spell 2')),
                ('stats', models.TextField(verbose_name='')),
                ('teamId', models.IntegerField(verbose_name='Id del lado en el que jugaba (100=Blue, 200=Purple)')),
            ],
        ),
        migrations.CreateModel(
            name='GoldDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('base', models.IntegerField(verbose_name='')),
                ('purchasable', models.BooleanField(verbose_name='')),
                ('sell', models.IntegerField(verbose_name='')),
                ('total', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='GroupDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('MaxGroupOwnable', models.TextField(verbose_name='')),
                ('key', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ImageDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('full', models.TextField(verbose_name='')),
                ('group', models.TextField(verbose_name='')),
                ('h', models.IntegerField(verbose_name='')),
                ('sprite', models.TextField(verbose_name='')),
                ('w', models.IntegerField(verbose_name='')),
                ('x', models.IntegerField(verbose_name='')),
                ('y', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(verbose_name='')),
                ('created_at', models.TextField(verbose_name='')),
                ('exId', models.BigIntegerField(verbose_name='')),
                ('updates', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='InfoDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('attack', models.IntegerField(verbose_name='Ataque segun Riot')),
                ('defense', models.IntegerField(verbose_name='Defensa segun Riot')),
                ('difficulty', models.IntegerField(verbose_name='Dificultad segun Riot')),
                ('magic', models.IntegerField(verbose_name='Poder magico segun Riot')),
            ],
        ),
        migrations.CreateModel(
            name='ItemDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('colloq', models.TextField(verbose_name='')),
                ('consumeOnFull', models.BooleanField(verbose_name='')),
                ('consumed', models.BooleanField(verbose_name='')),
                ('depth', models.IntegerField(verbose_name='')),
                ('description', models.TextField(verbose_name='')),
                ('effect', models.TextField(verbose_name='')),
                ('exFrom', models.TextField(verbose_name='')),
                ('gold', models.TextField(verbose_name='')),
                ('group', models.TextField(verbose_name='')),
                ('hideFromAll', models.BooleanField(verbose_name='')),
                ('exId', models.IntegerField(verbose_name='')),
                ('image', models.TextField(verbose_name='')),
                ('inStore', models.BooleanField(verbose_name='')),
                ('into', models.TextField(verbose_name='')),
                ('maps', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('plaintext', models.TextField(verbose_name='')),
                ('requiredChampion', models.TextField(verbose_name='')),
                ('rune', models.TextField(verbose_name='')),
                ('sanitizedDescription', models.TextField(verbose_name='')),
                ('specialRecipe', models.IntegerField(verbose_name='')),
                ('stacks', models.IntegerField(verbose_name='')),
                ('stats', models.TextField(verbose_name='')),
                ('tags', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ItemTreeDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('header', models.TextField(verbose_name='')),
                ('tags', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='LanguageStringsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data', models.TextField(verbose_name='')),
                ('exType', models.TextField(verbose_name='')),
                ('version', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='LeagueDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('entries', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='N,max_length=300ombre expresado del jugador en esta liga')),
                ('participantId', models.TextField(verbose_name='I,max_length=300d del perteneciente a esta liga (Sea un team o un jugador)')),
                ('queue', models.TextField(verbose_name='T,max_length=300ipo de juego(RANKED_SOLO_5x5, RANKED_TEAM_3x3, RANKED_TEAM_5x5)')),
                ('tier', models.TextField(verbose_name='L,max_length=300iga (CHALLENGER, MASTER, DIAMOND, PLATINUM, GOLD, SILVER, BRONZE)')),
            ],
        ),
        migrations.CreateModel(
            name='LeagueEntryDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('division', models.TextField(verbose_name='D,max_length=300ivision en la que esta')),
                ('isFreshBlood', models.BooleanField(verbose_name='Especifica si es nuevo en la liga')),
                ('isHotStreak', models.BooleanField(verbose_name='Especifica si est\xe1 en racha')),
                ('isInactive', models.BooleanField(verbose_name='Especifica si est\xe1 inactivo')),
                ('isVeteran', models.BooleanField(verbose_name='Especifica si es un veterano en la liga')),
                ('leaguePoints', models.IntegerField(verbose_name='Puntos en la liga')),
                ('losses', models.IntegerField(verbose_name='Derrotas')),
                ('miniSeries', models.TextField(verbose_name='')),
                ('playerOrTeamId', models.TextField(verbose_name='I,max_length=300d del jugador o del team')),
                ('playerOrTeamName', models.TextField(verbose_name='N,max_length=300ombre del jugador o del team')),
                ('wins', models.IntegerField(verbose_name='Victorias')),
            ],
        ),
        migrations.CreateModel(
            name='LevelTipDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('effect', models.TextField(verbose_name='')),
                ('label', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MapDataDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data', models.TextField(verbose_name='')),
                ('exType', models.TextField(verbose_name='')),
                ('version', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MapDetailsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('image', models.TextField(verbose_name='')),
                ('mapId', models.BigIntegerField(verbose_name='')),
                ('mapName', models.TextField(verbose_name='')),
                ('unpurchasableItemList', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Mastery',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('masteryId', models.BigIntegerField(verbose_name='')),
                ('rank', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MasteryDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('exId', models.IntegerField(verbose_name='')),
                ('rank', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MasteryListDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data', models.TextField(verbose_name='')),
                ('tree', models.TextField(verbose_name='')),
                ('exType', models.TextField(verbose_name='')),
                ('version', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MasteryPageDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('current', models.BooleanField(verbose_name='')),
                ('exId', models.BigIntegerField(verbose_name='')),
                ('masteries', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MasteryPagesDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('pages', models.TextField(verbose_name='')),
                ('summonerId', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MasteryTreeDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('Defense', models.TextField(verbose_name='')),
                ('Offense', models.TextField(verbose_name='')),
                ('Utility', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MasteryTreeItemDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('masteryId', models.IntegerField(verbose_name='')),
                ('prereq', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MasteryTreeListDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('masteryTreeItems', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MatchDetail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mapId', models.IntegerField(verbose_name='')),
                ('matchCreation', models.BigIntegerField(verbose_name='')),
                ('matchDuration', models.BigIntegerField(verbose_name='')),
                ('matchId', models.BigIntegerField(verbose_name='')),
                ('matchMode', models.TextField(verbose_name='')),
                ('matchType', models.TextField(verbose_name='')),
                ('matchVersion', models.TextField(verbose_name='')),
                ('participantIdentities', models.TextField(verbose_name='')),
                ('participants', models.TextField(verbose_name='')),
                ('platformId', models.TextField(verbose_name='')),
                ('queueType', models.TextField(verbose_name='')),
                ('region', models.TextField(verbose_name='')),
                ('season', models.TextField(verbose_name='')),
                ('teams', models.TextField(verbose_name='')),
                ('timeline', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MatchHistorySummaryDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('assists', models.IntegerField(verbose_name='')),
                ('date', models.BigIntegerField(verbose_name='')),
                ('deaths', models.IntegerField(verbose_name='')),
                ('gameId', models.BigIntegerField(verbose_name='')),
                ('gameMode', models.TextField(verbose_name='')),
                ('invalid', models.BooleanField(verbose_name='')),
                ('kills', models.IntegerField(verbose_name='')),
                ('mapId', models.IntegerField(verbose_name='')),
                ('opposingTeamKills', models.IntegerField(verbose_name='')),
                ('opposingTeamName', models.TextField(verbose_name='')),
                ('win', models.BooleanField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MatchList',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('endIndex', models.IntegerField(verbose_name='')),
                ('matches', models.TextField(verbose_name='')),
                ('startIndex', models.IntegerField(verbose_name='')),
                ('totalGames', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MatchReference',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('champion', models.BigIntegerField(verbose_name='')),
                ('lane', models.TextField(verbose_name='')),
                ('matchId', models.BigIntegerField(verbose_name='')),
                ('platformId', models.TextField(verbose_name='')),
                ('queue', models.TextField(verbose_name='')),
                ('role', models.TextField(verbose_name='')),
                ('season', models.TextField(verbose_name='')),
                ('timestamp', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MatchSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mapId', models.IntegerField(verbose_name='')),
                ('matchCreation', models.BigIntegerField(verbose_name='')),
                ('matchDuration', models.BigIntegerField(verbose_name='')),
                ('matchId', models.BigIntegerField(verbose_name='')),
                ('matchMode', models.TextField(verbose_name='')),
                ('matchType', models.TextField(verbose_name='')),
                ('matchVersion', models.TextField(verbose_name='')),
                ('participantIdentities', models.TextField(verbose_name='')),
                ('participants', models.TextField(verbose_name='')),
                ('platformId', models.TextField(verbose_name='')),
                ('queueType', models.TextField(verbose_name='')),
                ('region', models.TextField(verbose_name='')),
                ('season', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('author', models.TextField(verbose_name='')),
                ('content', models.TextField(verbose_name='')),
                ('created_at', models.TextField(verbose_name='')),
                ('exId', models.BigIntegerField(verbose_name='')),
                ('severity', models.TextField(verbose_name='')),
                ('translations', models.TextField(verbose_name='')),
                ('updated_at', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MetaDataDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('isRune', models.BooleanField(verbose_name='')),
                ('tier', models.TextField(verbose_name='')),
                ('exType', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='MiniSeriesDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('losses', models.IntegerField(verbose_name='Numero de partidas que perdi\xf3 en promo')),
                ('progress', models.TextField(verbose_name='M,max_length=300uestra la promocion actual (W=Victoria L=Derrota N=Falta Jugar)')),
                ('target', models.IntegerField(verbose_name='Numero de victorias necesarias para promocionar')),
                ('wins', models.IntegerField(verbose_name='Numero de partidas que gan\xf3 en promo')),
            ],
        ),
        migrations.CreateModel(
            name='Observer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('encryptionKey', models.TextField(verbose_name='K,max_length=300ey used to decrypt the spectator grid game data for playback')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('championId', models.IntegerField(verbose_name='')),
                ('highestAchievedSeasonTier', models.TextField(verbose_name='')),
                ('masteries', models.TextField(verbose_name='')),
                ('participantId', models.IntegerField(verbose_name='')),
                ('runes', models.TextField(verbose_name='')),
                ('spell1Id', models.IntegerField(verbose_name='')),
                ('spell2Id', models.IntegerField(verbose_name='')),
                ('stats', models.TextField(verbose_name='')),
                ('teamId', models.IntegerField(verbose_name='')),
                ('timeline', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantFrame',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('currentGold', models.IntegerField(verbose_name='')),
                ('dominionScore', models.IntegerField(verbose_name='')),
                ('jungleMinionsKilled', models.IntegerField(verbose_name='')),
                ('level', models.IntegerField(verbose_name='')),
                ('minionsKilled', models.IntegerField(verbose_name='')),
                ('participantId', models.IntegerField(verbose_name='')),
                ('position', models.TextField(verbose_name='')),
                ('teamScore', models.IntegerField(verbose_name='')),
                ('totalGold', models.IntegerField(verbose_name='')),
                ('xp', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantIdentity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('participantId', models.IntegerField(verbose_name='')),
                ('player', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantStats',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('assists', models.BigIntegerField(verbose_name='')),
                ('champLevel', models.BigIntegerField(verbose_name='')),
                ('combatPlayerScore', models.BigIntegerField(verbose_name='')),
                ('deaths', models.BigIntegerField(verbose_name='')),
                ('doubleKills', models.BigIntegerField(verbose_name='')),
                ('firstBloodAssist', models.BooleanField(verbose_name='')),
                ('firstBloodKill', models.BooleanField(verbose_name='')),
                ('firstInhibitorAssist', models.BooleanField(verbose_name='')),
                ('firstInhibitorKill', models.BooleanField(verbose_name='')),
                ('firstTowerAssist', models.BooleanField(verbose_name='')),
                ('firstTowerKill', models.BooleanField(verbose_name='')),
                ('goldEarned', models.BigIntegerField(verbose_name='')),
                ('goldSpent', models.BigIntegerField(verbose_name='')),
                ('inhibitorKills', models.BigIntegerField(verbose_name='')),
                ('item0', models.BigIntegerField(verbose_name='')),
                ('item1', models.BigIntegerField(verbose_name='')),
                ('item2', models.BigIntegerField(verbose_name='')),
                ('item3', models.BigIntegerField(verbose_name='')),
                ('item4', models.BigIntegerField(verbose_name='')),
                ('item5', models.BigIntegerField(verbose_name='')),
                ('item6', models.BigIntegerField(verbose_name='')),
                ('killingSprees', models.BigIntegerField(verbose_name='')),
                ('kills', models.BigIntegerField(verbose_name='')),
                ('largestCriticalStrike', models.BigIntegerField(verbose_name='')),
                ('largestKillingSpree', models.BigIntegerField(verbose_name='')),
                ('largestMultiKill', models.BigIntegerField(verbose_name='')),
                ('magicDamageDealt', models.BigIntegerField(verbose_name='')),
                ('magicDamageDealtToChampions', models.BigIntegerField(verbose_name='')),
                ('magicDamageTaken', models.BigIntegerField(verbose_name='')),
                ('minionsKilled', models.BigIntegerField(verbose_name='')),
                ('neutralMinionsKilled', models.BigIntegerField(verbose_name='')),
                ('neutralMinionsKilledEnemyJungle', models.BigIntegerField(verbose_name='')),
                ('neutralMinionsKilledTeamJungle', models.BigIntegerField(verbose_name='')),
                ('nodeCapture', models.BigIntegerField(verbose_name='')),
                ('nodeCaptureAssist', models.BigIntegerField(verbose_name='')),
                ('nodeNeutralize', models.BigIntegerField(verbose_name='')),
                ('nodeNeutralizeAssist', models.BigIntegerField(verbose_name='')),
                ('objectivePlayerScore', models.BigIntegerField(verbose_name='')),
                ('pentaKills', models.BigIntegerField(verbose_name='')),
                ('physicalDamageDealt', models.BigIntegerField(verbose_name='')),
                ('physicalDamageDealtToChampions', models.BigIntegerField(verbose_name='')),
                ('physicalDamageTaken', models.BigIntegerField(verbose_name='')),
                ('quadraKills', models.BigIntegerField(verbose_name='')),
                ('sightWardsBoughtInGame', models.BigIntegerField(verbose_name='')),
                ('teamObjective', models.BigIntegerField(verbose_name='')),
                ('totalDamageDealt', models.BigIntegerField(verbose_name='')),
                ('totalDamageDealtToChampions', models.BigIntegerField(verbose_name='')),
                ('totalDamageTaken', models.BigIntegerField(verbose_name='')),
                ('totalHeal', models.BigIntegerField(verbose_name='')),
                ('totalPlayerScore', models.BigIntegerField(verbose_name='')),
                ('totalScoreRank', models.BigIntegerField(verbose_name='')),
                ('totalTimeCrowdControlDealt', models.BigIntegerField(verbose_name='')),
                ('totalUnitsHealed', models.BigIntegerField(verbose_name='')),
                ('towerKills', models.BigIntegerField(verbose_name='')),
                ('tripleKills', models.BigIntegerField(verbose_name='')),
                ('trueDamageDealt', models.BigIntegerField(verbose_name='')),
                ('trueDamageDealtToChampions', models.BigIntegerField(verbose_name='')),
                ('trueDamageTaken', models.BigIntegerField(verbose_name='')),
                ('unrealKills', models.BigIntegerField(verbose_name='')),
                ('visionWardsBoughtInGame', models.BigIntegerField(verbose_name='')),
                ('wardsKilled', models.BigIntegerField(verbose_name='')),
                ('wardsPlaced', models.BigIntegerField(verbose_name='')),
                ('winner', models.BooleanField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantTimeline',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ancientGolemAssistsPerMinCounts', models.TextField(verbose_name='')),
                ('ancientGolemKillsPerMinCounts', models.TextField(verbose_name='')),
                ('assistedLaneDeathsPerMinDeltas', models.TextField(verbose_name='')),
                ('assistedLaneKillsPerMinDeltas', models.TextField(verbose_name='')),
                ('baronAssistsPerMinCounts', models.TextField(verbose_name='')),
                ('baronKillsPerMinCounts', models.TextField(verbose_name='')),
                ('creepsPerMinDeltas', models.TextField(verbose_name='')),
                ('csDiffPerMinDeltas', models.TextField(verbose_name='')),
                ('damageTakenDiffPerMinDeltas', models.TextField(verbose_name='')),
                ('damageTakenPerMinDeltas', models.TextField(verbose_name='')),
                ('dragonAssistsPerMinCounts', models.TextField(verbose_name='')),
                ('dragonKillsPerMinCounts', models.TextField(verbose_name='')),
                ('elderLizardAssistsPerMinCounts', models.TextField(verbose_name='')),
                ('elderLizardKillsPerMinCounts', models.TextField(verbose_name='')),
                ('goldPerMinDeltas', models.TextField(verbose_name='')),
                ('inhibitorAssistsPerMinCounts', models.TextField(verbose_name='')),
                ('inhibitorKillsPerMinCounts', models.TextField(verbose_name='')),
                ('lane', models.TextField(verbose_name='')),
                ('role', models.TextField(verbose_name='')),
                ('towerAssistsPerMinCounts', models.TextField(verbose_name='')),
                ('towerKillsPerMinCounts', models.TextField(verbose_name='')),
                ('towerKillsPerMinDeltas', models.TextField(verbose_name='')),
                ('vilemawAssistsPerMinCounts', models.TextField(verbose_name='')),
                ('vilemawKillsPerMinCounts', models.TextField(verbose_name='')),
                ('wardsPerMinDeltas', models.TextField(verbose_name='')),
                ('xpDiffPerMinDeltas', models.TextField(verbose_name='')),
                ('xpPerMinDeltas', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantTimelineData',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('tenToTwenty', models.FloatField(verbose_name='')),
                ('thirtyToEnd', models.FloatField(verbose_name='')),
                ('twentyToThirty', models.FloatField(verbose_name='')),
                ('zeroToTen', models.FloatField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='PassiveDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.TextField(verbose_name='D,max_length=300escripcion')),
                ('image', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='N,max_length=300ombre de la pasiva')),
                ('sanitizedDescription', models.TextField(verbose_name='D,max_length=300escripcion concreta')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('matchHistoryUri', models.TextField(verbose_name='')),
                ('profileIcon', models.IntegerField(verbose_name='')),
                ('summonerId', models.BigIntegerField(verbose_name='')),
                ('summonerName', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('championId', models.IntegerField(verbose_name=b'Id del campeon asociado al jugador')),
                ('summonerId', models.BigIntegerField(verbose_name='Id del invocador')),
                ('teamId', models.IntegerField(verbose_name='Id al equipo asociado al jugador')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerHistory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('matches', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerStatsSummaryDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('aggregatedStats', models.TextField(verbose_name='')),
                ('losses', models.IntegerField(verbose_name='')),
                ('modifyDate', models.BigIntegerField(verbose_name='')),
                ('playerStatSummaryType', models.TextField(verbose_name='')),
                ('wins', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerStatsSummaryListDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('playerStatSummaries', models.TextField(verbose_name='')),
                ('summonerId', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('x', models.IntegerField(verbose_name='')),
                ('y', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='RankedStatsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('champions', models.TextField(verbose_name='')),
                ('modifyDate', models.BigIntegerField(verbose_name='')),
                ('summonerId', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='RawStatsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('assists', models.IntegerField(verbose_name='Cantidad de asistencias')),
                ('barracksKilled', models.IntegerField(verbose_name='Cantidad de inhibidores')),
                ('championsKilled', models.IntegerField(verbose_name='Cantidad de asesinatos')),
                ('combatPlayerScore', models.IntegerField(verbose_name='')),
                ('consumablesPurchased', models.IntegerField(verbose_name='Cantidad de consumibles comprados')),
                ('damageDealtPlayer', models.IntegerField(verbose_name='Da\xf1o a campeones')),
                ('doubleKills', models.IntegerField(verbose_name='Cantidad de Doblekills')),
                ('firstBlood', models.IntegerField(verbose_name='Cantidad de FirstBlood')),
                ('gold', models.IntegerField(verbose_name='Oro ganado')),
                ('goldEarned', models.IntegerField(verbose_name='Oro ganado')),
                ('goldSpent', models.IntegerField(verbose_name='Oro gastado')),
                ('item0', models.IntegerField(verbose_name='Item 0')),
                ('item1', models.IntegerField(verbose_name='Item 1')),
                ('item2', models.IntegerField(verbose_name='Item 2')),
                ('item3', models.IntegerField(verbose_name='Item 3')),
                ('item4', models.IntegerField(verbose_name='Item 4')),
                ('item5', models.IntegerField(verbose_name='Item 5')),
                ('item6', models.IntegerField(verbose_name='Item 6')),
                ('itemsPurchased', models.IntegerField(verbose_name='Cantidad de items comprados')),
                ('killingSprees', models.IntegerField(verbose_name='Cantidad de killingSprees')),
                ('largestCriticalStrike', models.IntegerField(verbose_name='Mayor da\xf1o con un critico')),
                ('largestKillingSpree', models.IntegerField(verbose_name='Mayor killingSprees')),
                ('largestMultiKill', models.IntegerField(verbose_name='Mayor racha de asesinatos')),
                ('legendaryItemsCreated', models.IntegerField(verbose_name='Items completados')),
                ('level', models.IntegerField(verbose_name='Nivel')),
                ('magicDamageDealtPlayer', models.IntegerField(verbose_name='Da\xf1o magico hecho')),
                ('magicDamageDealtToChampions', models.IntegerField(verbose_name='Da\xf1o magico a campeones')),
                ('magicDamageTaken', models.IntegerField(verbose_name='Da\xf1o magico recibido')),
                ('minionsDenied', models.IntegerField(verbose_name='Minions denegados')),
                ('minionsKilled', models.IntegerField(verbose_name='Minions asesinados')),
                ('neutralMinionsKilled', models.IntegerField(verbose_name='Minions neutrales asesinados')),
                ('neutralMinionsKilledEnemyJungle', models.IntegerField(verbose_name='Minions de la jungla enemiga asesinados')),
                ('neutralMinionsKilledYourJungle', models.IntegerField(verbose_name='Minions de tu jungla enemiga asesinados')),
                ('nexusKilled', models.BooleanField(verbose_name='Partida ganada')),
                ('nodeCapture', models.IntegerField(verbose_name='Torres capturadas')),
                ('nodeCaptureAssist', models.IntegerField(verbose_name='Asistencias al capturar torres')),
                ('nodeNeutralize', models.IntegerField(verbose_name='Torres neutralizadas')),
                ('nodeNeutralizeAssist', models.IntegerField(verbose_name='Asistencias para neutralizar torres')),
                ('numDeaths', models.IntegerField(verbose_name='Muertes')),
                ('numItemsBought', models.IntegerField(verbose_name='Cantidad de items comprados')),
                ('objectivePlayerScore', models.IntegerField(verbose_name='Puntaje objetivo del jugador')),
                ('pentaKills', models.IntegerField(verbose_name='Cantidad de Pentakills')),
                ('physicalDamageDealtPlayer', models.IntegerField(verbose_name='Da\xf1o fisico hecho')),
                ('physicalDamageDealtToChampions', models.IntegerField(verbose_name='Da\xf1o fisico a campeones')),
                ('physicalDamageTaken', models.IntegerField(verbose_name='Da\xf1o fisico recibido')),
                ('playerPosition', models.IntegerField(verbose_name='Posicion (TOP(1), MIDDLE(2), JUNGLE(3), BOT(4))')),
                ('playerRole', models.IntegerField(verbose_name='Rol (DUO(1), SUPPORT(2), CARRY(3), SOLO(4))')),
                ('quadraKills', models.IntegerField(verbose_name='Cantidad de cuadrakills')),
                ('sightWardsBought', models.IntegerField(verbose_name='Wards rosas comprados')),
                ('spell1Cast', models.IntegerField(verbose_name='Veces que lanz\xf3 el Spell 1')),
                ('spell2Cast', models.IntegerField(verbose_name='Veces que lanz\xf3 el Spell 2')),
                ('spell3Cast', models.IntegerField(verbose_name='Veces que lanz\xf3 el Spell 3')),
                ('spell4Cast', models.IntegerField(verbose_name='Veces que lanz\xf3 el Spell 4')),
                ('summonSpell1Cast', models.IntegerField(verbose_name='Veces que lanz\xf3 el SummonerSpell 1')),
                ('summonSpell2Cast', models.IntegerField(verbose_name='Veces que lanz\xf3 el SummonerSpell 2')),
                ('superMonsterKilled', models.IntegerField(verbose_name='Asesinatos de Nashor')),
                ('team', models.IntegerField(verbose_name='Equipo')),
                ('teamObjective', models.IntegerField(verbose_name='Objetivo del equipo')),
                ('timePlayed', models.IntegerField(verbose_name='Tiempo jugado')),
                ('totalDamageDealt', models.IntegerField(verbose_name='Da\xf1o total realizado')),
                ('totalDamageDealtToChampions', models.IntegerField(verbose_name='Da\xf1o total a campeones')),
                ('totalDamageTaken', models.IntegerField(verbose_name='Da\xf1o total recibido')),
                ('totalHeal', models.IntegerField(verbose_name='Vida curada')),
                ('totalPlayerScore', models.IntegerField(verbose_name='Puntaje total del jugador')),
                ('totalScoreRank', models.IntegerField(verbose_name='Rango total del puntaje')),
                ('totalTimeCrowdControlDealt', models.IntegerField(verbose_name='Tiempo que duro tu control de mazas')),
                ('totalUnitsHealed', models.IntegerField(verbose_name='Unidades curadas')),
                ('tripleKills', models.IntegerField(verbose_name='Cantidad de tripleKills')),
                ('trueDamageDealtPlayer', models.IntegerField(verbose_name='Cantidad de True Damage realizado')),
                ('trueDamageDealtToChampions', models.IntegerField(verbose_name='Cantidad de True Damage realizado a campeones')),
                ('trueDamageTaken', models.IntegerField(verbose_name='Cantidad de True Damage recibido')),
                ('turretsKilled', models.IntegerField(verbose_name='Torres que destruiste')),
                ('unrealKill', models.IntegerField(verbose_name='Cantidad de True Damage realizado')),
                ('victoryPointTotals', models.IntegerField(verbose_name='Puntos totales por la victoria')),
                ('visionWardsBought', models.IntegerField(verbose_name='Wards comprados')),
                ('wardKilled', models.IntegerField(verbose_name='Wards destruidos')),
                ('wardPlaced', models.IntegerField(verbose_name='Wards colocados')),
                ('win', models.BooleanField(verbose_name='Partida ganada')),
            ],
        ),
        migrations.CreateModel(
            name='RealmDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('cdn', models.TextField(verbose_name='')),
                ('css', models.TextField(verbose_name='')),
                ('dd', models.TextField(verbose_name='')),
                ('l', models.TextField(verbose_name='')),
                ('lg', models.TextField(verbose_name='')),
                ('n', models.TextField(verbose_name='')),
                ('profileiconmax', models.IntegerField(verbose_name='')),
                ('store', models.TextField(verbose_name='')),
                ('v', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='RecentGamesDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('games', models.TextField(verbose_name='')),
                ('summonerId', models.BigIntegerField(verbose_name='Id del jugador')),
            ],
        ),
        migrations.CreateModel(
            name='RecommendedDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('blocks', models.TextField(verbose_name='')),
                ('champion', models.TextField(verbose_name='N,max_length=300ombre del Campeon')),
                ('exMap', models.TextField(verbose_name='M,max_length=300apa')),
                ('mode', models.TextField(verbose_name='M,max_length=300odo en el que se recomiendan(CLASSIC, ARAM, etc)')),
                ('priority', models.BooleanField(verbose_name='Prioridad')),
                ('title', models.TextField(verbose_name='T,max_length=300itulo de la Build')),
                ('exType', models.TextField(verbose_name='T,max_length=300itulo del conjunto de items(iniciales, finales, etc)')),
            ],
        ),
        migrations.CreateModel(
            name='RosterDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('memberList', models.TextField(verbose_name='')),
                ('ownerId', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Rune',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('runeId', models.BigIntegerField(verbose_name='Id de la runa')),
                ('count', models.IntegerField(verbose_name='Cantidad de copias de esta runa')),
            ],
        ),
        migrations.CreateModel(
            name='RuneDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('colloq', models.TextField(verbose_name='')),
                ('consumeOnFull', models.BooleanField(verbose_name='')),
                ('consumed', models.BooleanField(verbose_name='')),
                ('depth', models.IntegerField(verbose_name='')),
                ('description', models.TextField(verbose_name='')),
                ('exFrom', models.TextField(verbose_name='')),
                ('group', models.TextField(verbose_name='')),
                ('hideFromAll', models.BooleanField(verbose_name='')),
                ('exId', models.IntegerField(verbose_name='')),
                ('image', models.TextField(verbose_name='')),
                ('inStore', models.BooleanField(verbose_name='')),
                ('into', models.TextField(verbose_name='')),
                ('maps', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('plaintext', models.TextField(verbose_name='')),
                ('requiredChampion', models.TextField(verbose_name='')),
                ('rune', models.TextField(verbose_name='')),
                ('sanitizedDescription', models.TextField(verbose_name='')),
                ('specialRecipe', models.IntegerField(verbose_name='')),
                ('stacks', models.IntegerField(verbose_name='')),
                ('stats', models.TextField(verbose_name='')),
                ('tags', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='RuneListDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('basic', models.TextField(verbose_name='')),
                ('data', models.TextField(verbose_name='')),
                ('exType', models.TextField(verbose_name='')),
                ('version', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='RunePageDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('current', models.BooleanField(verbose_name='')),
                ('exId', models.BigIntegerField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('slots', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='RunePagesDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('pages', models.TextField(verbose_name='')),
                ('summonerId', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='RuneSlotDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('runeId', models.IntegerField(verbose_name='')),
                ('runeSlotId', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('incidents', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('slug', models.TextField(verbose_name='')),
                ('status', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Shard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('hostname', models.TextField(verbose_name='')),
                ('locales', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('region_tag', models.TextField(verbose_name='')),
                ('slug', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='ShardStatus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('hostname', models.TextField(verbose_name='')),
                ('locales', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('region_tag', models.TextField(verbose_name='')),
                ('services', models.TextField(verbose_name='')),
                ('slug', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='SkinDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('exId', models.IntegerField(verbose_name='Id de la skin')),
                ('name', models.TextField(verbose_name='N,max_length=300ombre de la skin')),
                ('num', models.IntegerField(verbose_name='Numero de skin de este Pj(Default=0)')),
            ],
        ),
        migrations.CreateModel(
            name='SpellVarsDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('coeff', models.TextField(verbose_name='')),
                ('dyn', models.TextField(verbose_name='S,max_length=300i el spell tiene da\xf1o dinamico, especifica si el da\xf1o aumenta(+) o diminuye(-)')),
                ('keyslink', models.TextField(verbose_name='K,max_length=300ey del spell')),
                ('link', models.TextField(verbose_name='L,max_length=300ink del spell, donde se especifica si tiene un da\xf1o estatico o dinamico(que depende de otra variable)')),
                ('ranksWith', models.TextField(verbose_name='V,max_length=300ariable rara que solo tiene karma(value=KarmaMantra)')),
            ],
        ),
        migrations.CreateModel(
            name='SummonerDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('exId', models.BigIntegerField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('profileIconId', models.IntegerField(verbose_name='')),
                ('revisionDate', models.BigIntegerField(verbose_name='')),
                ('summonerLevel', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='SummonerSpellDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('cooldown', models.TextField(verbose_name='')),
                ('cooldownBurn', models.TextField(verbose_name='')),
                ('cost', models.TextField(verbose_name='')),
                ('costBurn', models.TextField(verbose_name='')),
                ('costType', models.TextField(verbose_name='')),
                ('description', models.TextField(verbose_name='')),
                ('effect', models.TextField(verbose_name='')),
                ('effectBurn', models.TextField(verbose_name='')),
                ('exId', models.IntegerField(verbose_name='')),
                ('image', models.TextField(verbose_name='')),
                ('key', models.TextField(verbose_name='')),
                ('leveltip', models.TextField(verbose_name='')),
                ('maxrank', models.IntegerField(verbose_name='')),
                ('modes', models.TextField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('exRange', models.TextField(verbose_name='')),
                ('rangeBurn', models.TextField(verbose_name='')),
                ('resource', models.TextField(verbose_name='')),
                ('sanitizedDescription', models.TextField(verbose_name='')),
                ('sanitizedTooltip', models.TextField(verbose_name='')),
                ('summonerLevel', models.IntegerField(verbose_name='')),
                ('tooltip', models.TextField(verbose_name='')),
                ('exVars', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='SummonerSpellListDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data', models.TextField(verbose_name='')),
                ('exType', models.TextField(verbose_name='')),
                ('version', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bans', models.TextField(verbose_name='')),
                ('baronKills', models.IntegerField(verbose_name='')),
                ('dominionVictoryScore', models.BigIntegerField(verbose_name='')),
                ('dragonKills', models.IntegerField(verbose_name='')),
                ('firstBaron', models.BooleanField(verbose_name='')),
                ('firstBlood', models.BooleanField(verbose_name='')),
                ('firstDragon', models.BooleanField(verbose_name='')),
                ('firstInhibitor', models.BooleanField(verbose_name='')),
                ('firstTower', models.BooleanField(verbose_name='')),
                ('inhibitorKills', models.IntegerField(verbose_name='')),
                ('teamId', models.IntegerField(verbose_name='')),
                ('towerKills', models.IntegerField(verbose_name='')),
                ('vilemawKills', models.IntegerField(verbose_name='')),
                ('winner', models.BooleanField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='TeamDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('createDate', models.BigIntegerField(verbose_name='')),
                ('fullId', models.TextField(verbose_name='')),
                ('lastGameDate', models.BigIntegerField(verbose_name='')),
                ('lastJoinDate', models.BigIntegerField(verbose_name='')),
                ('lastJoinedRankedTeamQueueDate', models.BigIntegerField(verbose_name='')),
                ('matchHistory', models.TextField(verbose_name='')),
                ('modifyDate', models.BigIntegerField(verbose_name='')),
                ('name', models.TextField(verbose_name='')),
                ('roster', models.TextField(verbose_name='')),
                ('secondLastJoinDate', models.BigIntegerField(verbose_name='')),
                ('status', models.TextField(verbose_name='')),
                ('tag', models.TextField(verbose_name='')),
                ('teamStatDetails', models.TextField(verbose_name='')),
                ('thirdLastJoinDate', models.BigIntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMemberInfoDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('inviteDate', models.BigIntegerField(verbose_name='')),
                ('joinDate', models.BigIntegerField(verbose_name='')),
                ('playerId', models.BigIntegerField(verbose_name='')),
                ('status', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='TeamStatDetailDto',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('averageGamesPlayed', models.IntegerField(verbose_name='')),
                ('losses', models.IntegerField(verbose_name='')),
                ('teamStatType', models.TextField(verbose_name='')),
                ('wins', models.IntegerField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Timeline',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('frameInterval', models.BigIntegerField(verbose_name='')),
                ('frames', models.TextField(verbose_name='')),
            ],
        ),
        migrations.CreateModel(
            name='Translation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('content', models.TextField(verbose_name='')),
                ('locale', models.TextField(verbose_name='')),
                ('updated_at', models.TextField(verbose_name='')),
            ],
        ),
    ]
